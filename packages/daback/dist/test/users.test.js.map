{"version":3,"sources":["../../src/test/users.test.ts"],"sourcesContent":["import request from 'supertest';\nimport { App } from '@/app';\nimport { User } from '@interfaces/users.interface';\nimport { UserModel } from '@models/users.model';\nimport { UserRoute } from '@routes/users.route';\n\nafterAll(async () => {\n  await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\n});\n\ndescribe('TEST Users API', () => {\n  const route = new UserRoute();\n  const app = new App([route]);\n\n  describe('[GET] /users', () => {\n    it('response statusCode 200 /findAll', () => {\n      const findUser: User[] = UserModel;\n\n      return request(app.getServer()).get(`${route.path}`).expect(200, { data: findUser, message: 'findAll' });\n    });\n  });\n\n  describe('[GET] /users/:id', () => {\n    it('response statusCode 200 /findOne', () => {\n      const userId = 1;\n      const findUser: User = UserModel.find(user => user.id === userId);\n\n      return request(app.getServer()).get(`${route.path}/${userId}`).expect(200, { data: findUser, message: 'findOne' });\n    });\n  });\n\n  describe('[POST] /users', () => {\n    it('response statusCode 201 /created', async () => {\n      const userData: User = {\n        email: 'example@email.com',\n        password: 'password123456789',\n      };\n\n      return request(app.getServer()).post(`${route.path}`).send(userData).expect(201);\n    });\n  });\n\n  describe('[PUT] /users/:id', () => {\n    it('response statusCode 200 /updated', async () => {\n      const userId = 1;\n      const userData: User = {\n        password: 'password123456789',\n      };\n\n      return request(app.getServer()).put(`${route.path}/${userId}`).send(userData).expect(200);\n    });\n  });\n\n  describe('[DELETE] /users/:id', () => {\n    it('response statusCode 200 /deleted', () => {\n      const userId = 1;\n      const deleteUser: User[] = UserModel.filter(user => user.id !== userId);\n\n      return request(app.getServer()).delete(`${route.path}/${userId}`).expect(200, { data: deleteUser, message: 'deleted' });\n    });\n  });\n});\n"],"names":["afterAll","Promise","resolve","setTimeout","describe","route","UserRoute","app","App","it","findUser","UserModel","request","getServer","get","path","expect","data","message","userId","find","user","id","userData","email","password","post","send","put","deleteUser","filter","delete"],"mappings":";;;;oDAAoB;qBACA;4BAEM;4BACA;;;;;;AAE1BA,SAAS;IACP,MAAM,IAAIC,QAAcC,CAAAA,UAAWC,WAAW,IAAMD,WAAW;AACjE;AAEAE,SAAS,kBAAkB;IACzB,MAAMC,QAAQ,IAAIC;IAClB,MAAMC,MAAM,IAAIC,SAAI;QAACH;KAAM;IAE3BD,SAAS,gBAAgB;QACvBK,GAAG,oCAAoC;YACrC,MAAMC,WAAmBC;YAEzB,OAAOC,IAAAA,oBAAQL,IAAIM,aAAaC,IAAI,CAAC,EAAET,MAAMU,KAAK,CAAC,EAAEC,OAAO,KAAK;gBAAEC,MAAMP;gBAAUQ,SAAS;YAAU;QACxG;IACF;IAEAd,SAAS,oBAAoB;QAC3BK,GAAG,oCAAoC;YACrC,MAAMU,SAAS;YACf,MAAMT,WAAiBC,sBAAUS,KAAKC,CAAAA,OAAQA,KAAKC,OAAOH;YAE1D,OAAOP,IAAAA,oBAAQL,IAAIM,aAAaC,IAAI,CAAC,EAAET,MAAMU,KAAK,CAAC,EAAEI,OAAO,CAAC,EAAEH,OAAO,KAAK;gBAAEC,MAAMP;gBAAUQ,SAAS;YAAU;QAClH;IACF;IAEAd,SAAS,iBAAiB;QACxBK,GAAG,oCAAoC;YACrC,MAAMc,WAAiB;gBACrBC,OAAO;gBACPC,UAAU;YACZ;YAEA,OAAOb,IAAAA,oBAAQL,IAAIM,aAAaa,KAAK,CAAC,EAAErB,MAAMU,KAAK,CAAC,EAAEY,KAAKJ,UAAUP,OAAO;QAC9E;IACF;IAEAZ,SAAS,oBAAoB;QAC3BK,GAAG,oCAAoC;YACrC,MAAMU,SAAS;YACf,MAAMI,WAAiB;gBACrBE,UAAU;YACZ;YAEA,OAAOb,IAAAA,oBAAQL,IAAIM,aAAae,IAAI,CAAC,EAAEvB,MAAMU,KAAK,CAAC,EAAEI,OAAO,CAAC,EAAEQ,KAAKJ,UAAUP,OAAO;QACvF;IACF;IAEAZ,SAAS,uBAAuB;QAC9BK,GAAG,oCAAoC;YACrC,MAAMU,SAAS;YACf,MAAMU,aAAqBlB,sBAAUmB,OAAOT,CAAAA,OAAQA,KAAKC,OAAOH;YAEhE,OAAOP,IAAAA,oBAAQL,IAAIM,aAAakB,OAAO,CAAC,EAAE1B,MAAMU,KAAK,CAAC,EAAEI,OAAO,CAAC,EAAEH,OAAO,KAAK;gBAAEC,MAAMY;gBAAYX,SAAS;YAAU;QACvH;IACF;AACF"}