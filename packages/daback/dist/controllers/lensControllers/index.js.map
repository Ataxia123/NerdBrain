{"version":3,"sources":["../../../src/controllers/lensControllers/index.js"],"sourcesContent":["import { \n  authenticationQuery, \n  authenticate,\n  challangeQuery, \n  challenge,\n  createProfuileQuery, \n  createPostRequest,\n  refreshQuery, \n  searchProfilesQuery, \n  searchPublicationsQuery\n} from \"./querys.js\";\nimport path from \"path\";\nimport ethers from \"ethers\";\nimport { createClient } from \"urql\";\nimport fetch from \"cross-fetch\";\nimport dotenv from \"dotenv\";\nimport {uploadIpfsGetPath} from \"../ipfs.js/index.js\";\nimport { v4 as uuidv4 } from 'uuid';\nimport crypto from \"crypto\";\nconst { config } = dotenv;\nconfig();\n\n\nconst serverAddress = process.env.SERVER_WALLET_ADDRESS;\nconst privateKey = process.env.SERVER_PRIVATE_KEY;\nlet accessToken = process.env.ACCESS_TOKEN;\nconst APIURL = 'https://api-mumbai.lens.dev/';\n\nexport const urqlClient = createClient({\n  url: APIURL,\n  fetch: async (url, options) => {\n    options.headers['x-access-token'] = accessToken;\n    return fetch(url, options);\n  },\n  fetchOptions: {\n    headers: {\n      // other headers...\n    }\n  }\n});\n\n\nconst provider = new ethers.ethers.providers.JsonRpcProvider(\"https://rpc.ankr.com/polygon_mumbai\");\nconst signer = new ethers.Wallet(privateKey, provider);\nconst address = signer.address;\n\nlet accessTokenExpiration = Number(process.env.ACCESS_TOKEN_EXPIRATION);\nlet refreshToken = null;\nlet tokenExpiry = null;\n\nconst urlValidator = (req, res, next) => {\nconst urlRegex = /^https:\\/\\/chat\\.openai\\.com\\/share\\/[\\w-]+$/;\n\nconst { url } = req.body;\n\nif (!urlRegex.test(url)) {\n  return res.status(400).json({ error: 'Invalid URL format.' });\n}\n\nnext();\n};\n\nexport const signedTypeData = async (\n  domain,\n  types,\n  value\n) => {\n  // remove the __typedname from the signature!\n  const result = await signer._signTypedData(\n    omit(domain, '__typename'),\n    omit(types, '__typename'),\n    omit(value, '__typename')\n  );\n\n  // console.log('typed data - domain', omit(domain, '__typename'));\n  // console.log('typed data - types', omit(types, '__typename'));\n  // console.log('typed data - value', omit(value, '__typename'));\n  // console.log('typed data - signature', result);\n\n  // const whoSigned = utils.verifyTypedData(\n  //   omit(domain, '__typename'),\n  //   omit(types, '__typename'),\n  //   omit(value, '__typename'),\n  //   result\n  // );\n  // console.log('who signed', whoSigned);\n\n  return result;\n};\n\n\nexport const setAccessToken = (token, expiry) => {\n    accessToken = token;\n    tokenExpiry = expiry;\n    console.log('Access token set: ', accessToken, expiry);\n};\n\nexport const isTokenExpired = () => {\n    if (!tokenExpiry) return true;\n    const currentTime = Math.floor(new Date().getTime() / 1000);\n    return currentTime > tokenExpiry;\n}\n\nexport const login = async () => {\n  try {\n    if (!serverAddress || !privateKey) {\n      throw new Error('Missing environment variables');\n    }\n\n\n    const challengeInfo = await urqlClient.query(challenge, {\n        address: address\n    }).toPromise();\n\n    const signature = await signer.signMessage(challengeInfo.data.challenge.text);\n\n    const authData = await urqlClient.mutation(authenticate, {\n        address: address,\n        signature\n    }).toPromise();\n\n    if (authData.error) {\n        throw new Error(authData.error.message);\n    }\n\n    const { data: { authenticate: { accessToken: newToken, expiresAt }}} = authData;\n    accessTokenExpiration = expiresAt * 1000;\n\n    // Returns the access token\n    setAccessToken(newToken, accessTokenExpiration);\n    return newToken;\n  } catch (err) {\n    console.log('Error signing in: ', err);\n    throw err;\n  }\n}\n\nexport const broadcast = async (req, res) => {\n  try {\n\n  const { text: text } = req.body;\n\n  console.log('follow with broadcast: address', address);\n\n  const result = await urqlClient.mutation(createPostRequest, { text }).toPromise();\n  console.log('follow with broadcast: result', result);\n\n  const typedData = result.typedData;\n  console.log('follow with broadcast: typedData', typedData);\n\n  const signature = await signedTypeData(typedData.domain, typedData.types, typedData.value);\n  console.log('follow with broadcast: signature', signature);\n\n  const broadcastResult = await broadcastRequest({\n    id: result.id,\n    signature,\n  });\n\n  console.log('follow with broadcast: broadcastResult', broadcastResult);\n  if (broadcastResult.__typename !== 'RelayerResult') {\n    console.error('follow with broadcast: failed', broadcastResult);\n    throw new Error('follow with broadcast: failed');\n  }\n\n  console.log('follow with broadcast: poll until indexed');\n  const indexedResult = await pollUntilIndexed({ txId: broadcastResult.txId });\n\n  console.log('follow with broadcast: has been indexed', result);\n\n  const logs = indexedResult.txReceipt.logs;\n\n  console.log('follow with broadcast: logs', logs);\n} catch (error) {\n  console.error('An error occurred:', error);\n  // Handle the error, for example send a response with error status\n  res.status(500).send({ error: error.toString() });\n}\n}\n\nexport const searchProfiles = async (req, res) => {\n  const { query } = req.params;\n  console.log(query);\n\n  const response = await urqlClient.query(searchProfilesQuery, { query }).toPromise();\n\n  res.json(response.data.search.items);\n  console.log(response.data.search.items);\n}\n\nexport const searchPublications = async (req, res) => {\n  const { query } = req.params;\n  console.log(query);\n\n  const response = await urqlClient.query(searchPublicationsQuery, { query }).toPromise();\n\n  res.json(response.data.search.items);\n  console.log(response.data.search.items);\n}\n\nexport const authorization = async (req, res) => {\n  const response = await urqlClient.query(challangeQuery).toPromise();\n\n  res.json(response.data.challenge.text);\n  console.log(response.data.challenge.text);\n}\n\nexport const refresh = async () => {\n  const variables = { refreshToken };\n\n  try {\n      const response = await urqlClient.mutation(refreshMutation, variables).toPromise();\n\n      // Check if there was an error\n      if (response.error) {\n          console.error('Refresh token error: ', response.error);\n          throw new Error('Error refreshing token: ' + response.error.message);\n      }\n\n      // If no error, update accessToken, refreshToken and expiry\n      const newAccessToken = response.data.refresh.accessToken;\n      const newRefreshToken = response.data.refresh.refreshToken;\n      // Assuming you get `expiresIn` in the response which is the time in seconds for the token to expire.\n      const expiresIn = response.data.refresh.expiresIn;\n      const expiryTime = Math.floor(Date.now() / 1000) + expiresIn; // Current Unix timestamp + expiresIn\n\n      // Set the accessToken, refreshToken and expiry in the store\n\n\n      // Also update the refreshToken for subsequent refresh calls.\n      refreshToken = newRefreshToken;\n  } catch (err) {\n      console.error('Error in refresh function: ', err);\n      throw err;\n  }\n};\n\n// Initialize refresh function\n(async function initializeRefresh() {\n  try {\n      // Call the login function to get initial tokens\n      const loginResponse = await login(); // Assume login function return tokens\n      accessToken = loginResponse.accessToken;\n      refreshToken = loginResponse.refreshToken;\n\n      // Set interval to refresh tokens every hour\n      setInterval(refresh, 60 * 60 * 1000);\n  } catch (error) {\n      console.log('Error initializing refresh:', error);\n  }\n})();\n\nexport const authentication = async (req, res) => {\n  const body = req.body;\n  console.log(body);\n\n  const response = await urqlClient.mutation(authenticationQuery).toPromise();\n\n  res.json(response);\n  console.log(response);\n}\n\nexport const sign = (req, res) => {\n  res.sendFile(path.resolve(\"./public/index.html\"));\n}\n\nexport const create = async (req, res) => {\n  const body = req.body;\n  console.log(body);\n\n  const response = await urqlClient.mutation(createProfuileQuery, { ...body }).toPromise();\n\n\nres.json(response);\n}\n\nexport const postGaslessData = async (req, res) => {\ntry{\n    const body = req.body;\n    console.log(body);\n\n    const response = await urqlClient.mutation(createPostRequest, { ...body }).toPromise();\n    console.log('create post via dispatcher: createPostViaDispatcherRequest', response);\n    res.json(response);\n\n\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ error: 'An error occurred' });\n  }\n};\n\nexport const createPostGasless = async () => {\n  const prefix = 'create post gasless';\n  const profileId = process.env.PROFILE_ID;\n \n  if (!profileId) {\n    throw new Error('Must define PROFILE_ID in the .env to run this');\n  }\n\n  const address = fakeAddress;\n  console.log(`${prefix}: address`, address);\n\n  const ipfsResult = await uploadIpfsGetPath({\n    version: '2.0.0',\n    metadata_id: uuidv4(),\n    description: 'Description',\n    locale: 'en-US',\n    content: '@wagmi.test',\n    external_url: null,\n    image: null,\n    imageMimeType: null,\n    name: 'Name',\n    attributes: [],\n    tags: ['using_api_examples'],\n    appId: 'api_examples_github',\n  });\n\n  console.log(`${prefix}: ipfs result`, ipfsResult);\n\n  // hard coded to make the code example clear\n\n\n  const result = await postGasless(createPostRequest);\n  console.log(prefix, result);\n\n  // await pollAndIndexPost(result.txHash, profileId, prefix);\n};\n\n// export const pollAndIndexPost = async (txHash, profileId, prefix) => {\n//   console.log(`${prefix}: poll until indexed`);\n//   const indexedResult = await pollUntilIndexed({ txHash });\n\n//   console.log(`${prefix}: profile has been indexed`);\n\n//   const logs = indexedResult.txReceipt.logs;\n\n//   console.log(`${prefix}: logs`, logs);\n\n//   const topicId = utils.id(\n//     'PostCreated(uint256,uint256,string,address,bytes,address,bytes,uint256)'\n//   );\n//   console.log('topicid we care about', topicId);\n\n//   const profileCreatedLog = logs.find((l) => l.topics[0] === topicId);\n//   console.log(`${prefix}: created log`, profileCreatedLog);\n\n//   let profileCreatedEventLog = profileCreatedLog.topics;\n//   console.log(`${prefix}: created event logs`, profileCreatedEventLog);\n\n//   const publicationId = ethers.utils.defaultAbiCoder.decode(['uint256'], profileCreatedEventLog[2])[0];\n\n//   const contractPublicationId = ethers.BigNumber.from(publicationId).toHexString();\n\n//   const internalPublicationId = profileId + '-' + contractPublicationId;\n\n//   console.log(`${prefix}: contract publication id`, contractPublicationId);\n//   console.log(`${prefix}: internal publication id`, internalPublicationId);\n//   return internalPublicationId;\n// };\n\n\nexport const createPost =  async (req, res) => {\n  try {\n    const body = req.body;\n    console.log(body);\n    \n    // Include accessToken in the headers for the mutation request.\n    const response = await urqlClient.mutation(\n      createPostRequest, \n      { ...body },\n    ).toPromise();\n\n    res.json(response);\n    console.log(response, \"response\");\n  } catch (err) {\n    console.log('Error creating post: ', err);\n    res.status(500).json({ error: 'Error creating post: ' + err.message });\n  }\n};\n"],"names":["urqlClient","signedTypeData","setAccessToken","isTokenExpired","login","broadcast","searchProfiles","searchPublications","authorization","refresh","authentication","sign","create","postGaslessData","createPostGasless","createPost","config","dotenv","serverAddress","process","env","SERVER_WALLET_ADDRESS","privateKey","SERVER_PRIVATE_KEY","accessToken","ACCESS_TOKEN","APIURL","createClient","url","fetch","options","headers","fetchOptions","provider","ethers","providers","JsonRpcProvider","signer","Wallet","address","accessTokenExpiration","Number","ACCESS_TOKEN_EXPIRATION","refreshToken","tokenExpiry","urlValidator","req","res","next","urlRegex","body","test","status","json","error","domain","types","value","result","_signTypedData","omit","token","expiry","console","log","currentTime","Math","floor","Date","getTime","Error","challengeInfo","query","challenge","toPromise","signature","signMessage","data","text","authData","mutation","authenticate","message","newToken","expiresAt","err","createPostRequest","typedData","broadcastResult","broadcastRequest","id","__typename","indexedResult","pollUntilIndexed","txId","logs","txReceipt","send","toString","params","response","searchProfilesQuery","search","items","searchPublicationsQuery","challangeQuery","variables","refreshMutation","newAccessToken","newRefreshToken","expiresIn","expiryTime","now","initializeRefresh","loginResponse","setInterval","authenticationQuery","sendFile","path","resolve","createProfuileQuery","prefix","profileId","PROFILE_ID","fakeAddress","ipfsResult","uploadIpfsGetPath","version","metadata_id","uuidv4","description","locale","content","external_url","image","imageMimeType","name","attributes","tags","appId","postGasless"],"mappings":";;;;;;;;;;;IA4BaA,UAAU;eAAVA;;IAkCAC,cAAc;eAAdA;;IA6BAC,cAAc;eAAdA;;IAMAC,cAAc;eAAdA;;IAMAC,KAAK;eAALA;;IAkCAC,SAAS;eAATA;;IA0CAC,cAAc;eAAdA;;IAUAC,kBAAkB;eAAlBA;;IAUAC,aAAa;eAAbA;;IAOAC,OAAO;eAAPA;;IA6CAC,cAAc;eAAdA;;IAUAC,IAAI;eAAJA;;IAIAC,MAAM;eAANA;;IAUAC,eAAe;eAAfA;;IAgBAC,iBAAiB;eAAjBA;;IAsEAC,UAAU;eAAVA;;;wBA/VN;+CACU;iDACE;sBACU;qDACX;iDACC;uBACa;sBACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE7B,MAAM,EAAEC,OAAM,EAAE,GAAGC;AACnBD;AAGA,MAAME,gBAAgBC,QAAQC,IAAIC;AAClC,MAAMC,aAAaH,QAAQC,IAAIG;AAC/B,IAAIC,cAAcL,QAAQC,IAAIK;AAC9B,MAAMC,SAAS;AAER,MAAM1B,aAAa2B,IAAAA,oBAAa;IACrCC,KAAKF;IACLG,OAAO,OAAOD,KAAKE;QACjBA,QAAQC,OAAO,CAAC,iBAAiB,GAAGP;QACpC,OAAOK,IAAAA,qBAAMD,KAAKE;IACpB;IACAE,cAAc;QACZD,SAAS,CAET;IACF;AACF;AAGA,MAAME,WAAW,IAAIC,gBAAOA,OAAOC,UAAUC,gBAAgB;AAC7D,MAAMC,SAAS,IAAIH,gBAAOI,OAAOhB,YAAYW;AAC7C,MAAMM,UAAUF,OAAOE;AAEvB,IAAIC,wBAAwBC,OAAOtB,QAAQC,IAAIsB;AAC/C,IAAIC,eAAe;AACnB,IAAIC,cAAc;AAElB,MAAMC,eAAe,CAACC,KAAKC,KAAKC;IAChC,MAAMC,WAAW;IAEjB,MAAM,EAAErB,IAAG,EAAE,GAAGkB,IAAII;IAEpB,IAAI,CAACD,SAASE,KAAKvB,MAAM;QACvB,OAAOmB,IAAIK,OAAO,KAAKC,KAAK;YAAEC,OAAO;QAAsB;IAC7D;IAEAN;AACA;AAEO,MAAM/C,iBAAiB,OAC5BsD,QACAC,OACAC;IAGA,MAAMC,SAAS,MAAMrB,OAAOsB,eAC1BC,KAAKL,QAAQ,eACbK,KAAKJ,OAAO,eACZI,KAAKH,OAAO;IAgBd,OAAOC;AACT;AAGO,MAAMxD,iBAAiB,CAAC2D,OAAOC;IAClCtC,cAAcqC;IACdjB,cAAckB;IACdC,QAAQC,IAAI,sBAAsBxC,aAAasC;AACnD;AAEO,MAAM3D,iBAAiB;IAC1B,IAAI,CAACyC,aAAa,OAAO;IACzB,MAAMqB,cAAcC,KAAKC,MAAM,IAAIC,OAAOC,YAAY;IACtD,OAAOJ,cAAcrB;AACzB;AAEO,MAAMxC,QAAQ;IACnB,IAAI;QACF,IAAI,CAACc,iBAAiB,CAACI,YAAY;YACjC,MAAM,IAAIgD,MAAM;QAClB;QAGA,MAAMC,gBAAgB,MAAMvE,WAAWwE,MAAMC,mBAAW;YACpDlC,SAASA;QACb,GAAGmC;QAEH,MAAMC,YAAY,MAAMtC,OAAOuC,YAAYL,cAAcM,KAAKJ,UAAUK;QAExE,MAAMC,WAAW,MAAM/E,WAAWgF,SAASC,sBAAc;YACrD1C,SAASA;YACToC;QACJ,GAAGD;QAEH,IAAIK,SAASzB,OAAO;YAChB,MAAM,IAAIgB,MAAMS,SAASzB,MAAM4B;QACnC;QAEA,MAAM,EAAEL,MAAM,EAAEI,cAAc,EAAEzD,aAAa2D,SAAQ,EAAEC,UAAS,EAAE,CAAA,EAAC,CAAA,EAAC,GAAGL;QACvEvC,wBAAwB4C,YAAY;QAGpClF,eAAeiF,UAAU3C;QACzB,OAAO2C;IACT,EAAE,OAAOE,KAAK;QACZtB,QAAQC,IAAI,sBAAsBqB;QAClC,MAAMA;IACR;AACF;AAEO,MAAMhF,YAAY,OAAOyC,KAAKC;IACnC,IAAI;QAEJ,MAAM,EAAE+B,MAAMA,KAAI,EAAE,GAAGhC,IAAII;QAE3Ba,QAAQC,IAAI,kCAAkCzB;QAE9C,MAAMmB,SAAS,MAAM1D,WAAWgF,SAASM,2BAAmB;YAAER;QAAK,GAAGJ;QACtEX,QAAQC,IAAI,iCAAiCN;QAE7C,MAAM6B,YAAY7B,OAAO6B;QACzBxB,QAAQC,IAAI,oCAAoCuB;QAEhD,MAAMZ,YAAY,MAAM1E,eAAesF,UAAUhC,QAAQgC,UAAU/B,OAAO+B,UAAU9B;QACpFM,QAAQC,IAAI,oCAAoCW;QAEhD,MAAMa,kBAAkB,MAAMC,iBAAiB;YAC7CC,IAAIhC,OAAOgC;YACXf;QACF;QAEAZ,QAAQC,IAAI,0CAA0CwB;QACtD,IAAIA,gBAAgBG,eAAe,iBAAiB;YAClD5B,QAAQT,MAAM,iCAAiCkC;YAC/C,MAAM,IAAIlB,MAAM;QAClB;QAEAP,QAAQC,IAAI;QACZ,MAAM4B,gBAAgB,MAAMC,iBAAiB;YAAEC,MAAMN,gBAAgBM;QAAK;QAE1E/B,QAAQC,IAAI,2CAA2CN;QAEvD,MAAMqC,OAAOH,cAAcI,UAAUD;QAErChC,QAAQC,IAAI,+BAA+B+B;IAC7C,EAAE,OAAOzC,OAAO;QACdS,QAAQT,MAAM,sBAAsBA;QAEpCP,IAAIK,OAAO,KAAK6C,KAAK;YAAE3C,OAAOA,MAAM4C;QAAW;IACjD;AACA;AAEO,MAAM5F,iBAAiB,OAAOwC,KAAKC;IACxC,MAAM,EAAEyB,MAAK,EAAE,GAAG1B,IAAIqD;IACtBpC,QAAQC,IAAIQ;IAEZ,MAAM4B,WAAW,MAAMpG,WAAWwE,MAAM6B,6BAAqB;QAAE7B;IAAM,GAAGE;IAExE3B,IAAIM,KAAK+C,SAASvB,KAAKyB,OAAOC;IAC9BxC,QAAQC,IAAIoC,SAASvB,KAAKyB,OAAOC;AACnC;AAEO,MAAMhG,qBAAqB,OAAOuC,KAAKC;IAC5C,MAAM,EAAEyB,MAAK,EAAE,GAAG1B,IAAIqD;IACtBpC,QAAQC,IAAIQ;IAEZ,MAAM4B,WAAW,MAAMpG,WAAWwE,MAAMgC,iCAAyB;QAAEhC;IAAM,GAAGE;IAE5E3B,IAAIM,KAAK+C,SAASvB,KAAKyB,OAAOC;IAC9BxC,QAAQC,IAAIoC,SAASvB,KAAKyB,OAAOC;AACnC;AAEO,MAAM/F,gBAAgB,OAAOsC,KAAKC;IACvC,MAAMqD,WAAW,MAAMpG,WAAWwE,MAAMiC,wBAAgB/B;IAExD3B,IAAIM,KAAK+C,SAASvB,KAAKJ,UAAUK;IACjCf,QAAQC,IAAIoC,SAASvB,KAAKJ,UAAUK;AACtC;AAEO,MAAMrE,UAAU;IACrB,MAAMiG,YAAY;QAAE/D;IAAa;IAEjC,IAAI;QACA,MAAMyD,WAAW,MAAMpG,WAAWgF,SAAS2B,iBAAiBD,WAAWhC;QAGvE,IAAI0B,SAAS9C,OAAO;YAChBS,QAAQT,MAAM,yBAAyB8C,SAAS9C;YAChD,MAAM,IAAIgB,MAAM,6BAA6B8B,SAAS9C,MAAM4B;QAChE;QAGA,MAAM0B,iBAAiBR,SAASvB,KAAKpE,QAAQe;QAC7C,MAAMqF,kBAAkBT,SAASvB,KAAKpE,QAAQkC;QAE9C,MAAMmE,YAAYV,SAASvB,KAAKpE,QAAQqG;QACxC,MAAMC,aAAa7C,KAAKC,MAAMC,KAAK4C,QAAQ,QAAQF;QAMnDnE,eAAekE;IACnB,EAAE,OAAOxB,KAAK;QACVtB,QAAQT,MAAM,+BAA+B+B;QAC7C,MAAMA;IACV;AACF;AAGC,CAAA,eAAe4B;IACd,IAAI;QAEA,MAAMC,gBAAgB,MAAM9G;QAC5BoB,cAAc0F,cAAc1F;QAC5BmB,eAAeuE,cAAcvE;QAG7BwE,YAAY1G,SAAS,KAAK,KAAK;IACnC,EAAE,OAAO6C,OAAO;QACZS,QAAQC,IAAI,+BAA+BV;IAC/C;AACF,CAAA;AAEO,MAAM5C,iBAAiB,OAAOoC,KAAKC;IACxC,MAAMG,OAAOJ,IAAII;IACjBa,QAAQC,IAAId;IAEZ,MAAMkD,WAAW,MAAMpG,WAAWgF,SAASoC,6BAAqB1C;IAEhE3B,IAAIM,KAAK+C;IACTrC,QAAQC,IAAIoC;AACd;AAEO,MAAMzF,OAAO,CAACmC,KAAKC;IACxBA,IAAIsE,SAASC,cAAKC,QAAQ;AAC5B;AAEO,MAAM3G,SAAS,OAAOkC,KAAKC;IAChC,MAAMG,OAAOJ,IAAII;IACjBa,QAAQC,IAAId;IAEZ,MAAMkD,WAAW,MAAMpG,WAAWgF,SAASwC,6BAAqB,mBAAKtE,OAAQwB;IAG/E3B,IAAIM,KAAK+C;AACT;AAEO,MAAMvF,kBAAkB,OAAOiC,KAAKC;IAC3C,IAAG;QACC,MAAMG,OAAOJ,IAAII;QACjBa,QAAQC,IAAId;QAEZ,MAAMkD,WAAW,MAAMpG,WAAWgF,SAASM,2BAAmB,mBAAKpC,OAAQwB;QAC3EX,QAAQC,IAAI,8DAA8DoC;QAC1ErD,IAAIM,KAAK+C;IAGX,EAAE,OAAOf,KAAK;QACZtB,QAAQT,MAAM+B;QACdtC,IAAIK,OAAO,KAAKC,KAAK;YAAEC,OAAO;QAAoB;IACpD;AACF;AAEO,MAAMxC,oBAAoB;IAC/B,MAAM2G,SAAS;IACf,MAAMC,YAAYvG,QAAQC,IAAIuG;IAE9B,IAAI,CAACD,WAAW;QACd,MAAM,IAAIpD,MAAM;IAClB;IAEA,MAAM/B,UAAUqF;IAChB7D,QAAQC,IAAI,CAAC,EAAEyD,OAAO,SAAS,CAAC,EAAElF;IAElC,MAAMsF,aAAa,MAAMC,IAAAA,0BAAkB;QACzCC,SAAS;QACTC,aAAaC,IAAAA;QACbC,aAAa;QACbC,QAAQ;QACRC,SAAS;QACTC,cAAc;QACdC,OAAO;QACPC,eAAe;QACfC,MAAM;QACNC,YAAY,EAAE;QACdC,MAAM;YAAC;SAAqB;QAC5BC,OAAO;IACT;IAEA5E,QAAQC,IAAI,CAAC,EAAEyD,OAAO,aAAa,CAAC,EAAEI;IAKtC,MAAMnE,SAAS,MAAMkF,YAAYtD;IACjCvB,QAAQC,IAAIyD,QAAQ/D;AAGtB;AAmCO,MAAM3C,aAAc,OAAO+B,KAAKC;IACrC,IAAI;QACF,MAAMG,OAAOJ,IAAII;QACjBa,QAAQC,IAAId;QAGZ,MAAMkD,WAAW,MAAMpG,WAAWgF,SAChCM,2BACA,mBAAKpC,OACLwB;QAEF3B,IAAIM,KAAK+C;QACTrC,QAAQC,IAAIoC,UAAU;IACxB,EAAE,OAAOf,KAAK;QACZtB,QAAQC,IAAI,yBAAyBqB;QACrCtC,IAAIK,OAAO,KAAKC,KAAK;YAAEC,OAAO,0BAA0B+B,IAAIH;QAAQ;IACtE;AACF"}