{"version":3,"sources":["../../src/utils/logger.ts"],"sourcesContent":["import { existsSync, mkdirSync } from 'fs';\nimport { join } from 'path';\nimport winston from 'winston';\nimport winstonDaily from 'winston-daily-rotate-file';\nimport { LOG_DIR } from '@config';\n\n// logs dir\nconst logDir: string = join(__dirname, LOG_DIR);\n\nif (!existsSync(logDir)) {\n  mkdirSync(logDir);\n}\n\n// Define log format\nconst logFormat = winston.format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`);\n\n/*\n * Log Level\n * error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6\n */\nconst logger = winston.createLogger({\n  format: winston.format.combine(\n    winston.format.timestamp({\n      format: 'YYYY-MM-DD HH:mm:ss',\n    }),\n    logFormat,\n  ),\n  transports: [\n    // debug log setting\n    new winstonDaily({\n      level: 'debug',\n      datePattern: 'YYYY-MM-DD',\n      dirname: logDir + '/debug', // log file /logs/debug/*.log in save\n      filename: `%DATE%.log`,\n      maxFiles: 30, // 30 Days saved\n      json: false,\n      zippedArchive: true,\n    }),\n    // error log setting\n    new winstonDaily({\n      level: 'error',\n      datePattern: 'YYYY-MM-DD',\n      dirname: logDir + '/error', // log file /logs/error/*.log in save\n      filename: `%DATE%.log`,\n      maxFiles: 30, // 30 Days saved\n      handleExceptions: true,\n      json: false,\n      zippedArchive: true,\n    }),\n  ],\n});\n\nlogger.add(\n  new winston.transports.Console({\n    format: winston.format.combine(winston.format.splat(), winston.format.colorize()),\n  }),\n);\n\nconst stream = {\n  write: (message: string) => {\n    logger.info(message.substring(0, message.lastIndexOf('\\n')));\n  },\n};\n\nexport { logger, stream };\n"],"names":["logger","stream","logDir","join","__dirname","LOG_DIR","existsSync","mkdirSync","logFormat","winston","format","printf","timestamp","level","message","createLogger","combine","transports","winstonDaily","datePattern","dirname","filename","maxFiles","json","zippedArchive","handleExceptions","add","Console","splat","colorize","write","info","substring","lastIndexOf"],"mappings":";;;;;;;;;;;IAgESA,MAAM;eAANA;;IAAQC,MAAM;eAANA;;;oBAhEqB;sBACjB;kDACD;iEACK;wBACD;;;;;;AAGxB,MAAMC,SAAiBC,IAAAA,YAAKC,WAAWC;AAEvC,IAAI,CAACC,IAAAA,gBAAWJ,SAAS;IACvBK,IAAAA,eAAUL;AACZ;AAGA,MAAMM,YAAYC,iBAAQC,OAAOC,OAAO,CAAC,EAAEC,UAAS,EAAEC,MAAK,EAAEC,QAAO,EAAE,GAAK,CAAC,EAAEF,UAAU,CAAC,EAAEC,MAAM,EAAE,EAAEC,QAAQ,CAAC;AAM9G,MAAMd,SAASS,iBAAQM,aAAa;IAClCL,QAAQD,iBAAQC,OAAOM,QACrBP,iBAAQC,OAAOE,UAAU;QACvBF,QAAQ;IACV,IACAF;IAEFS,YAAY;QAEV,IAAIC,gCAAa;YACfL,OAAO;YACPM,aAAa;YACbC,SAASlB,SAAS;YAClBmB,UAAU,CAAC,UAAU,CAAC;YACtBC,UAAU;YACVC,MAAM;YACNC,eAAe;QACjB;QAEA,IAAIN,gCAAa;YACfL,OAAO;YACPM,aAAa;YACbC,SAASlB,SAAS;YAClBmB,UAAU,CAAC,UAAU,CAAC;YACtBC,UAAU;YACVG,kBAAkB;YAClBF,MAAM;YACNC,eAAe;QACjB;KACD;AACH;AAEAxB,OAAO0B,IACL,IAAIjB,iBAAQQ,WAAWU,QAAQ;IAC7BjB,QAAQD,iBAAQC,OAAOM,QAAQP,iBAAQC,OAAOkB,SAASnB,iBAAQC,OAAOmB;AACxE;AAGF,MAAM5B,SAAS;IACb6B,OAAO,CAAChB;QACNd,OAAO+B,KAAKjB,QAAQkB,UAAU,GAAGlB,QAAQmB,YAAY;IACvD;AACF"}