{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { Service } from 'typedi';\nimport { HttpException } from '@exceptions/httpException';\nimport { User } from '@interfaces/users.interface';\nimport { UserModel } from '@models/users.model';\n\n@Service()\nexport class UserService {\n  public async findAllUser(): Promise<User[]> {\n    const users: User[] = UserModel;\n    return users;\n  }\n\n  public async findUserById(userId: number): Promise<User> {\n    const findUser: User = UserModel.find(user => user.id === userId);\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public async createUser(userData: User): Promise<User> {\n    const findUser: User = UserModel.find(user => user.email === userData.email);\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = { ...userData, id: UserModel.length + 1, password: hashedPassword };\n\n    return createUserData;\n  }\n\n  public async updateUser(userId: number, userData: User): Promise<User[]> {\n    const findUser: User = UserModel.find(user => user.id === userId);\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    const hashedPassword = await hash(userData.password, 10);\n    const updateUserData: User[] = UserModel.map((user: User) => {\n      if (user.id === findUser.id) user = { ...userData, id: userId, password: hashedPassword };\n      return user;\n    });\n\n    return updateUserData;\n  }\n\n  public async deleteUser(userId: number): Promise<User[]> {\n    const findUser: User = UserModel.find(user => user.id === userId);\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    const deleteUserData: User[] = UserModel.filter(user => user.id !== findUser.id);\n    return deleteUserData;\n  }\n}\n"],"names":["UserService","findAllUser","users","UserModel","findUserById","userId","findUser","find","user","id","HttpException","createUser","userData","email","hashedPassword","hash","password","createUserData","length","updateUser","updateUserData","map","deleteUser","deleteUserData","filter","Service"],"mappings":";;;;+BAOaA;;;eAAAA;;;wBAPQ;wBACG;+BACM;4BAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGbA,cAAN;IACL,MAAaC,cAA+B;QAC1C,MAAMC,QAAgBC;QACtB,OAAOD;IACT;IAEA,MAAaE,aAAaC,MAAc,EAAiB;QACvD,MAAMC,WAAiBH,sBAAUI,KAAKC,CAAAA,OAAQA,KAAKC,OAAOJ;QAC1D,IAAI,CAACC,UAAU,MAAM,IAAII,6BAAc,KAAK;QAE5C,OAAOJ;IACT;IAEA,MAAaK,WAAWC,QAAc,EAAiB;QACrD,MAAMN,WAAiBH,sBAAUI,KAAKC,CAAAA,OAAQA,KAAKK,UAAUD,SAASC;QACtE,IAAIP,UAAU,MAAM,IAAII,6BAAc,KAAK,CAAC,WAAW,EAAEE,SAASC,MAAM,eAAe,CAAC;QAExF,MAAMC,iBAAiB,MAAMC,IAAAA,cAAKH,SAASI,UAAU;QACrD,MAAMC,iBAAuB,wCAAKL;YAAUH,IAAIN,sBAAUe,SAAS;YAAGF,UAAUF;;QAEhF,OAAOG;IACT;IAEA,MAAaE,WAAWd,MAAc,EAAEO,QAAc,EAAmB;QACvE,MAAMN,WAAiBH,sBAAUI,KAAKC,CAAAA,OAAQA,KAAKC,OAAOJ;QAC1D,IAAI,CAACC,UAAU,MAAM,IAAII,6BAAc,KAAK;QAE5C,MAAMI,iBAAiB,MAAMC,IAAAA,cAAKH,SAASI,UAAU;QACrD,MAAMI,iBAAyBjB,sBAAUkB,IAAI,CAACb;YAC5C,IAAIA,KAAKC,OAAOH,SAASG,IAAID,OAAO,wCAAKI;gBAAUH,IAAIJ;gBAAQW,UAAUF;;YACzE,OAAON;QACT;QAEA,OAAOY;IACT;IAEA,MAAaE,WAAWjB,MAAc,EAAmB;QACvD,MAAMC,WAAiBH,sBAAUI,KAAKC,CAAAA,OAAQA,KAAKC,OAAOJ;QAC1D,IAAI,CAACC,UAAU,MAAM,IAAII,6BAAc,KAAK;QAE5C,MAAMa,iBAAyBpB,sBAAUqB,OAAOhB,CAAAA,OAAQA,KAAKC,OAAOH,SAASG;QAC7E,OAAOc;IACT;AACF;AA3CavB;IADZyB,IAAAA;GACYzB"}